import tensorflow as tf

sess = tf.InteractiveSession()


##################################################################
# compare for atrous_conv2d  and conv2d 
# rate = 1
# padding = SAME
##################################################################

d = tf.constant([[1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7],
                 [2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7],
                 [3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7],
                 [4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7],
                 [5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7],
                 [6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7],
                 [7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7],
                 [8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7]],
                shape=[1,8,8,1])

w = tf.constant([[11.0, 11.1, 11.2],
                 [12.0, 12.1, 12.2],
                 [13.0, 13.1, 13.2]],
                shape=[3,3,1,1])

o = tf.nn.atrous_conv2d(d, w, rate=1, padding="SAME")
o.eval()

d1 = d;
w1 = w;
o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="SAME")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()



##################################################################
# compare for atrous_conv2d  and conv2d 
# rate = 2
# padding = SAME
##################################################################

d = tf.constant([[1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7],
                 [2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7],
                 [3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7],
                 [4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7],
                 [5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7],
                 [6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7],
                 [7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7],
                 [8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7]],
                shape=[1,8,8,1])

w = tf.constant([[11.0, 11.1, 11.2],
                 [12.0, 12.1, 12.2],
                 [13.0, 13.1, 13.2]],
                shape=[3,3,1,1])

o = tf.nn.atrous_conv2d(d, w, rate=2, padding="SAME")
o.eval()

d1 = d;

w1 = tf.constant([[11.0, 0.0, 11.1, 0.0, 11.2],
                  [ 0.0, 0.0,  0.0, 0.0,  0.0],
                  [12.0, 0.0, 12.1, 0.0, 12.2],
                  [ 0.0, 0.0,  0.0, 0.0,  0.0],
                  [13.0, 0.0, 13.1, 0.0, 13.2]],
                 shape=[5,5,1,1])

o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="SAME")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()



##################################################################
# compare for atrous_conv2d  and conv2d 
# rate = 4
# padding = SAME
##################################################################

d = tf.constant([[1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7],
                 [2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7],
                 [3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7],
                 [4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7],
                 [5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7],
                 [6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7],
                 [7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7],
                 [8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7]],
                shape=[1,8,8,1])

w = tf.constant([[11.0, 11.1, 11.2],
                 [12.0, 12.1, 12.2],
                 [13.0, 13.1, 13.2]],
                shape=[3,3,1,1])

o = tf.nn.atrous_conv2d(d, w, rate=4, padding="SAME")
o.eval()

d1 = d;

w1 = tf.constant([[11.0, 0.0, 0.0, 0.0, 11.1, 0.0, 0.0, 0.0, 11.2],
                  [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0,  0.0],
                  [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0,  0.0],
                  [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0,  0.0],
                  [12.0, 0.0, 0.0, 0.0, 12.1, 0.0, 0.0, 0.0, 12.2],
                  [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0,  0.0],
                  [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0,  0.0],
                  [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0,  0.0],
                  [13.0, 0.0, 0.0, 0.0, 13.1, 0.0, 0.0, 0.0, 13.2]],
                 shape=[9,9,1,1])

o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="SAME")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()



##################################################################
# compare for atrous_conv2d  and conv2d 
# rate = 4
# padding = VALID
##################################################################

d = tf.constant([[1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8],
                 [2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8],
                 [3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8],
                 [4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8],
                 [5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8],
                 [6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8],
                 [7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8],
                 [8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8],
                 [9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8]],
                shape=[1,9,9,1])

w = tf.constant([[11.0, 11.1, 11.2],
                 [12.0, 12.1, 12.2],
                 [13.0, 13.1, 13.2]],
                shape=[3,3,1,1])

o = tf.nn.atrous_conv2d(d, w, rate=4, padding="VALID")
o.eval()

d1 = d;

w1 = tf.constant([[11.0, 0.0, 0.0, 0.0, 11.1, 0.0, 0.0, 0.0, 11.2],
                  [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0,  0.0],
                  [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0,  0.0],
                  [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0,  0.0],
                  [12.0, 0.0, 0.0, 0.0, 12.1, 0.0, 0.0, 0.0, 12.2],
                  [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0,  0.0],
                  [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0,  0.0],
                  [ 0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0,  0.0],
                  [13.0, 0.0, 0.0, 0.0, 13.1, 0.0, 0.0, 0.0, 13.2]],
                 shape=[9,9,1,1])

o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()





##################################################################
# compare for atrous_conv2d  and conv2d 
# rate = 2
# padding = SAME
# horizontal and vertical treat different
##################################################################

d = tf.constant([[1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7],
                 [2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7],
                 [3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7],
                 [4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7],
                 [5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7],
                 [6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7],
                 [7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7],
                 [8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7]],
                shape=[1,8,8,1])

w = tf.constant([[11.0, 11.1, 11.2],
                 [12.0, 12.1, 12.2],
                 [13.0, 13.1, 13.2]],
                shape=[3,3,1,1])

o = tf.nn.atrous_conv2d(d, w, rate=2, padding="SAME")
o.eval()

d1_even = tf.constant([[1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7],
                       [3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7],
                       [5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7],
                       [7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7]],
                      shape=[1,4,8,1])

d1_odd = tf.constant([[2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7],
                      [4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7],
                      [6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7],
                      [8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7]],
                     shape=[1,4,8,1])


w1 = tf.constant([[11.0, 0.0, 11.1, 0.0, 11.2],
                  [12.0, 0.0, 12.1, 0.0, 12.2],
                  [13.0, 0.0, 13.1, 0.0, 13.2]],
                 shape=[3,5,1,1])

o1_even = tf.nn.conv2d(d1_even, w1, strides=[1,1,1,1], padding="SAME")
o1_even.eval()

o1_odd = tf.nn.conv2d(d1_odd, w1, strides=[1,1,1,1], padding="SAME")
o1_odd.eval()

o1 = tf.stack([o1_even, o1_odd], axis=2)
o1 = tf.reshape(o1, [1, 8, 8, 1])
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()



