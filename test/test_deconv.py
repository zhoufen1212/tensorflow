import tensorflow as tf

sess = tf.InteractiveSession()

##################################################################
# compare for conv2d_transpose with normal conv2d method
# data is all zero
##################################################################
d = tf.constant(1.0, shape=[1,3,3,1])
w = tf.constant(1.0, shape=[3,3,1,1])
o = tf.nn.conv2d_transpose(d, w, output_shape=[1,6,6,1], strides=[1,2,2,1], padding="SAME")
o.eval()


d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], 
                  shape=[1,8,8,1])

w1 = tf.constant(1.0, shape=[3,3,1,1])

o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()




##################################################################
# compare for conv2d_transpose with normal conv2d method
# data is not zero
##################################################################
d = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], shape=[1,3,3,1])
w = tf.constant([[11.0, 12.0, 13.0], [14.0, 15.0, 16.0], [17.0, 18.0, 19.0]], shape=[3,3,1,1])
o = tf.nn.conv2d_transpose(d, w, output_shape=[1,6,6,1], strides=[1,2,2,1], padding="SAME")
o.eval()


d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 3.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 4.0, 0.0, 5.0, 0.0, 6.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 7.0, 0.0, 8.0, 0.0, 9.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], 
                  shape=[1,8,8,1])

w1 = tf.constant([[19.0, 18.0, 17.0], [16.0, 15.0, 14.0], [13.0, 12.0, 11.0]], shape=[3,3,1,1])

o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()



##################################################################
# compare for conv2d_transpose with normal conv2d method
# has more than one channel
##################################################################
d = tf.constant([[1.0, 1.1, 2.0, 2.1, 3.0, 3.1], [4.0, 4.1, 5.0, 5.1, 6.0, 6.1], [7.0, 7.1, 8.0, 8.1, 9.0, 9.1]], shape=[1,3,3,2])  #input channel: 2

w = tf.constant([[11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7], 
                 [12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7],
                 [13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7],
                 [14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7],
                 [15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7],
                 [16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7],
                 [17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7],
                 [18.0, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7],
                 [19.0, 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7]], 
                shape=[3,3,4,2])  #input channel: 2, output channel: 4

o = tf.nn.conv2d_transpose(d, w, output_shape=[1,6,6,4], strides=[1,2,2,1], padding="SAME")
o.eval()


d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 1.0, 1.1, 0.0, 0.0, 2.0, 2.1, 0.0, 0.0, 3.0, 3.1, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 4.0, 4.1, 0.0, 0.0, 5.0, 5.1, 0.0, 0.0, 6.0, 6.1, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 7.0, 7.1, 0.0, 0.0, 8.0, 8.1, 0.0, 0.0, 9.0, 9.1, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], 
                  shape=[1,8,8,2])  #input channel: 2

w1 = tf.constant([[19.0, 19.2, 19.4, 19.6, 19.1, 19.3, 19.5, 19.7], 
                  [18.0, 18.2, 18.4, 18.6, 18.1, 18.3, 18.5, 18.7],
                  [17.0, 17.2, 17.4, 17.6, 17.1, 17.3, 17.5, 17.7],
                  [16.0, 16.2, 16.4, 16.6, 16.1, 16.3, 16.5, 16.7],
                  [15.0, 15.2, 15.4, 15.6, 15.1, 15.3, 15.5, 15.7],
                  [14.0, 14.2, 14.4, 14.6, 14.1, 14.3, 14.5, 14.7],
                  [13.0, 13.2, 13.4, 13.6, 13.1, 13.3, 13.5, 13.7],
                  [12.0, 12.2, 12.4, 12.6, 12.1, 12.3, 12.5, 12.7],
                  [11.0, 11.2, 11.4, 11.6, 11.1, 11.3, 11.5, 11.7]], 
                 shape=[3,3,2,4])  #input channel: 2, output channel: 4

o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

##################################################################
# compare for conv2d_transpose with normal conv2d method
# data is not zero
# stride = 2
# weight size is 4
##################################################################
d = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], shape=[1,3,3,1])

w = tf.constant([[11.0, 11.1, 11.2, 11.3],
                 [12.0, 12.1, 12.2, 12.3],
                 [13.0, 13.1, 13.2, 13.3],
                 [14.0, 14.1, 14.2, 14.3]],
                shape=[4,4,1,1])

o = tf.nn.conv2d_transpose(d, w, output_shape=[1,6,6,1], strides=[1,2,2,1], padding="SAME")
o.eval()


d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 1.0, 0.0, 2.0, 0.0, 3.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 4.0, 0.0, 5.0, 0.0, 6.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 7.0, 0.0, 8.0, 0.0, 9.0]],
                 shape=[1,6,6,1])

w1 = tf.constant([[14.3, 14.2, 14.1, 14.0],
                  [13.3, 13.2, 13.1, 13.0],
                  [12.3, 12.2, 12.1, 12.0],
                  [11.3, 11.2, 11.1, 11.0]],
                 shape=[4,4,1,1])


o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="SAME")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()

##################################################################
# compare for conv2d_transpose with normal conv2d method
# data is not zero
# stride = 4
# weight size is 8
##################################################################
d = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], shape=[1,3,3,1])

w = tf.constant([[11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7],
                 [12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7],
                 [13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7],
                 [14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7],
                 [15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7],
                 [16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7],
                 [17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7],
                 [18.0, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7]],
                shape=[8,8,1,1])

o = tf.nn.conv2d_transpose(d, w, output_shape=[1,12,12,1], strides=[1,4,4,1], padding="SAME")
o.eval()


d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 6.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 9.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
                 shape=[1,12,12,1])

w1 = tf.constant([[18.7, 18.6, 18.5, 18.4, 18.3, 18.2, 18.1, 18.0],
                  [17.7, 17.6, 17.5, 17.4, 17.3, 17.2, 17.1, 17.0],
                  [16.7, 16.6, 16.5, 16.4, 16.3, 16.2, 16.1, 16.0],
                  [15.7, 15.6, 15.5, 15.4, 15.3, 15.2, 15.1, 15.0],
                  [14.7, 14.6, 14.5, 14.4, 14.3, 14.2, 14.1, 14.0],
                  [13.7, 13.6, 13.5, 13.4, 13.3, 13.2, 13.1, 13.0],
                  [12.7, 12.6, 12.5, 12.4, 12.3, 12.2, 12.1, 12.0],
                  [11.7, 11.6, 11.5, 11.4, 11.3, 11.2, 11.1, 11.0]],
                 shape=[8,8,1,1])


o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="SAME")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()


##################################################################
# compare for conv2d_transpose with normal conv2d method
# data is not zero
# stride = 4
# weight size is 8
# missing size is 0
##################################################################
d = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], shape=[1,3,3,1])

w = tf.constant([[11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7],
                 [12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7],
                 [13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7],
                 [14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7],
                 [15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7],
                 [16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7],
                 [17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7],
                 [18.0, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7]],
                shape=[8,8,1,1])

o = tf.nn.conv2d_transpose(d, w, output_shape=[1,12,12,1], strides=[1,4,4,1], padding="SAME")
o.eval()


d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
                 shape=[1,19,19,1])

w1 = tf.constant([[18.7, 18.6, 18.5, 18.4, 18.3, 18.2, 18.1, 18.0],
                  [17.7, 17.6, 17.5, 17.4, 17.3, 17.2, 17.1, 17.0],
                  [16.7, 16.6, 16.5, 16.4, 16.3, 16.2, 16.1, 16.0],
                  [15.7, 15.6, 15.5, 15.4, 15.3, 15.2, 15.1, 15.0],
                  [14.7, 14.6, 14.5, 14.4, 14.3, 14.2, 14.1, 14.0],
                  [13.7, 13.6, 13.5, 13.4, 13.3, 13.2, 13.1, 13.0],
                  [12.7, 12.6, 12.5, 12.4, 12.3, 12.2, 12.1, 12.0],
                  [11.7, 11.6, 11.5, 11.4, 11.3, 11.2, 11.1, 11.0]],
                 shape=[8,8,1,1])


o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()

##################################################################
# compare for conv2d_transpose with normal conv2d method
# data is not zero
# stride = 4
# weight size is 8
# missing size is 1
##################################################################
d = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], shape=[1,3,3,1])

w = tf.constant([[11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7],
                 [12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7],
                 [13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7],
                 [14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7],
                 [15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7],
                 [16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7],
                 [17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7],
                 [18.0, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7]],
                shape=[8,8,1,1])

o = tf.nn.conv2d_transpose(d, w, output_shape=[1,11,11,1], strides=[1,4,4,1], padding="SAME")
o.eval()


d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 9.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
                 shape=[1,18,18,1])

w1 = tf.constant([[18.7, 18.6, 18.5, 18.4, 18.3, 18.2, 18.1, 18.0],
                  [17.7, 17.6, 17.5, 17.4, 17.3, 17.2, 17.1, 17.0],
                  [16.7, 16.6, 16.5, 16.4, 16.3, 16.2, 16.1, 16.0],
                  [15.7, 15.6, 15.5, 15.4, 15.3, 15.2, 15.1, 15.0],
                  [14.7, 14.6, 14.5, 14.4, 14.3, 14.2, 14.1, 14.0],
                  [13.7, 13.6, 13.5, 13.4, 13.3, 13.2, 13.1, 13.0],
                  [12.7, 12.6, 12.5, 12.4, 12.3, 12.2, 12.1, 12.0],
                  [11.7, 11.6, 11.5, 11.4, 11.3, 11.2, 11.1, 11.0]],
                 shape=[8,8,1,1])


o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()


##################################################################
# compare for conv2d_transpose with normal conv2d method
# data is not zero
# stride = 4
# weight size is 8
# missing size is 2
##################################################################
d = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], shape=[1,3,3,1])

w = tf.constant([[11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7],
                 [12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7],
                 [13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7],
                 [14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7],
                 [15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7],
                 [16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7],
                 [17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7],
                 [18.0, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7]],
                shape=[8,8,1,1])

o = tf.nn.conv2d_transpose(d, w, output_shape=[1,10,10,1], strides=[1,4,4,1], padding="SAME")
o.eval()


d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 9.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
                 shape=[1,17,17,1])

w1 = tf.constant([[18.7, 18.6, 18.5, 18.4, 18.3, 18.2, 18.1, 18.0],
                  [17.7, 17.6, 17.5, 17.4, 17.3, 17.2, 17.1, 17.0],
                  [16.7, 16.6, 16.5, 16.4, 16.3, 16.2, 16.1, 16.0],
                  [15.7, 15.6, 15.5, 15.4, 15.3, 15.2, 15.1, 15.0],
                  [14.7, 14.6, 14.5, 14.4, 14.3, 14.2, 14.1, 14.0],
                  [13.7, 13.6, 13.5, 13.4, 13.3, 13.2, 13.1, 13.0],
                  [12.7, 12.6, 12.5, 12.4, 12.3, 12.2, 12.1, 12.0],
                  [11.7, 11.6, 11.5, 11.4, 11.3, 11.2, 11.1, 11.0]],
                 shape=[8,8,1,1])


o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()


##################################################################
# compare for conv2d_transpose with normal conv2d method
# data is not zero
# stride = 4
# weight size is 8
# missing size is 3
##################################################################
d = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], shape=[1,3,3,1])

w = tf.constant([[11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7],
                 [12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7],
                 [13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7],
                 [14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7],
                 [15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7],
                 [16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7],
                 [17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7],
                 [18.0, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7]],
                shape=[8,8,1,1])

o = tf.nn.conv2d_transpose(d, w, output_shape=[1,9,9,1], strides=[1,4,4,1], padding="SAME")
o.eval()


d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 9.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
                 shape=[1,16,16,1])

w1 = tf.constant([[18.7, 18.6, 18.5, 18.4, 18.3, 18.2, 18.1, 18.0],
                  [17.7, 17.6, 17.5, 17.4, 17.3, 17.2, 17.1, 17.0],
                  [16.7, 16.6, 16.5, 16.4, 16.3, 16.2, 16.1, 16.0],
                  [15.7, 15.6, 15.5, 15.4, 15.3, 15.2, 15.1, 15.0],
                  [14.7, 14.6, 14.5, 14.4, 14.3, 14.2, 14.1, 14.0],
                  [13.7, 13.6, 13.5, 13.4, 13.3, 13.2, 13.1, 13.0],
                  [12.7, 12.6, 12.5, 12.4, 12.3, 12.2, 12.1, 12.0],
                  [11.7, 11.6, 11.5, 11.4, 11.3, 11.2, 11.1, 11.0]],
                 shape=[8,8,1,1])


o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()


##################################################################
# compare for conv2d_transpose with normal conv2d method
# data is not zero
# stride = 4
# weight size is 7
# missing size is 0
##################################################################
d = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], shape=[1,3,3,1])

w = tf.constant([[11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6],
                 [12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6],
                 [13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6],
                 [14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6],
                 [15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6],
                 [16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6],
                 [17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6]],
                shape=[7,7,1,1])

o = tf.nn.conv2d_transpose(d, w, output_shape=[1,12,12,1], strides=[1,4,4,1], padding="SAME")
o.eval()

d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 9.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
                 shape=[1,18,18,1])



w1 = tf.constant([[17.6, 17.5, 17.4, 17.3, 17.2, 17.1, 17.0],
                  [16.6, 16.5, 16.4, 16.3, 16.2, 16.1, 16.0],
                  [15.6, 15.5, 15.4, 15.3, 15.2, 15.1, 15.0],
                  [14.6, 14.5, 14.4, 14.3, 14.2, 14.1, 14.0],
                  [13.6, 13.5, 13.4, 13.3, 13.2, 13.1, 13.0],
                  [12.6, 12.5, 12.4, 12.3, 12.2, 12.1, 12.0],
                  [11.6, 11.5, 11.4, 11.3, 11.2, 11.1, 11.0]],
                 shape=[7,7,1,1])


o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()



##################################################################
# compare for conv2d_transpose with normal conv2d method
# data is not zero
# stride = 4
# weight size is 7
# missing size is 1
##################################################################
d = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], shape=[1,3,3,1])

w = tf.constant([[11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6],
                 [12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6],
                 [13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6],
                 [14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6],
                 [15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6],
                 [16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6],
                 [17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6]],
                shape=[7,7,1,1])

o = tf.nn.conv2d_transpose(d, w, output_shape=[1,11,11,1], strides=[1,4,4,1], padding="SAME")
o.eval()

d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 9.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
                 shape=[1,17,17,1])


w1 = tf.constant([[17.6, 17.5, 17.4, 17.3, 17.2, 17.1, 17.0],
                  [16.6, 16.5, 16.4, 16.3, 16.2, 16.1, 16.0],
                  [15.6, 15.5, 15.4, 15.3, 15.2, 15.1, 15.0],
                  [14.6, 14.5, 14.4, 14.3, 14.2, 14.1, 14.0],
                  [13.6, 13.5, 13.4, 13.3, 13.2, 13.1, 13.0],
                  [12.6, 12.5, 12.4, 12.3, 12.2, 12.1, 12.0],
                  [11.6, 11.5, 11.4, 11.3, 11.2, 11.1, 11.0]],
                 shape=[7,7,1,1])


o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()


##################################################################
# compare for conv2d_transpose with normal conv2d method
# data is not zero
# stride = 4
# weight size is 7
# missing size is 2
##################################################################
d = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], shape=[1,3,3,1])

w = tf.constant([[11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6],
                 [12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6],
                 [13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6],
                 [14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6],
                 [15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6],
                 [16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6],
                 [17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6]],
                shape=[7,7,1,1])

o = tf.nn.conv2d_transpose(d, w, output_shape=[1,10,10,1], strides=[1,4,4,1], padding="SAME")
o.eval()

d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 9.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
                 shape=[1,16,16,1])


w1 = tf.constant([[17.6, 17.5, 17.4, 17.3, 17.2, 17.1, 17.0],
                  [16.6, 16.5, 16.4, 16.3, 16.2, 16.1, 16.0],
                  [15.6, 15.5, 15.4, 15.3, 15.2, 15.1, 15.0],
                  [14.6, 14.5, 14.4, 14.3, 14.2, 14.1, 14.0],
                  [13.6, 13.5, 13.4, 13.3, 13.2, 13.1, 13.0],
                  [12.6, 12.5, 12.4, 12.3, 12.2, 12.1, 12.0],
                  [11.6, 11.5, 11.4, 11.3, 11.2, 11.1, 11.0]],
                 shape=[7,7,1,1])


o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()

##################################################################
# compare for conv2d_transpose with normal conv2d method
# data is not zero
# stride = 4
# weight size is 7
# missing size is 3
##################################################################
d = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], shape=[1,3,3,1])

w = tf.constant([[11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6],
                 [12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6],
                 [13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6],
                 [14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6],
                 [15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6],
                 [16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6],
                 [17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6]],
                shape=[7,7,1,1])

o = tf.nn.conv2d_transpose(d, w, output_shape=[1,9,9,1], strides=[1,4,4,1], padding="SAME")
o.eval()

d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 9.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
                 shape=[1,15,15,1])


w1 = tf.constant([[17.6, 17.5, 17.4, 17.3, 17.2, 17.1, 17.0],
                  [16.6, 16.5, 16.4, 16.3, 16.2, 16.1, 16.0],
                  [15.6, 15.5, 15.4, 15.3, 15.2, 15.1, 15.0],
                  [14.6, 14.5, 14.4, 14.3, 14.2, 14.1, 14.0],
                  [13.6, 13.5, 13.4, 13.3, 13.2, 13.1, 13.0],
                  [12.6, 12.5, 12.4, 12.3, 12.2, 12.1, 12.0],
                  [11.6, 11.5, 11.4, 11.3, 11.2, 11.1, 11.0]],
                 shape=[7,7,1,1])


o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()

##################################################################
# compare for conv2d_transpose with normal convolution using VALID padding mode for transpose
# data is not zero
# stride = 4
# weight size is 8
##################################################################
d = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], shape=[1,3,3,1])

w = tf.constant([[11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7],
                 [12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7],
                 [13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7],
                 [14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7],
                 [15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7],
                 [16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7],
                 [17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7],
                 [18.0, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7]],
                shape=[8,8,1,1])

o = tf.nn.conv2d_transpose(d, w, output_shape=[1,16,16,1], strides=[1,4,4,1], padding="VALID")
o.eval()

d1 = tf.constant([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
                 shape=[1,23,23,1])

w1 = tf.constant([[18.7, 18.6, 18.5, 18.4, 18.3, 18.2, 18.1, 18.0],
                  [17.7, 17.6, 17.5, 17.4, 17.3, 17.2, 17.1, 17.0],
                  [16.7, 16.6, 16.5, 16.4, 16.3, 16.2, 16.1, 16.0],
                  [15.7, 15.6, 15.5, 15.4, 15.3, 15.2, 15.1, 15.0],
                  [14.7, 14.6, 14.5, 14.4, 14.3, 14.2, 14.1, 14.0],
                  [13.7, 13.6, 13.5, 13.4, 13.3, 13.2, 13.1, 13.0],
                  [12.7, 12.6, 12.5, 12.4, 12.3, 12.2, 12.1, 12.0],
                  [11.7, 11.6, 11.5, 11.4, 11.3, 11.2, 11.1, 11.0]],
                 shape=[8,8,1,1])



o1 = tf.nn.conv2d(d1, w1, strides=[1,1,1,1], padding="VALID")
o1.eval()

o_cmp = tf.reduce_all(tf.equal(o, o1))
o_cmp.eval()

o_diff = tf.subtract(o, o1)
o_diff.eval()

o_err = tf.losses.mean_squared_error(o, o1)
o_err.eval()





